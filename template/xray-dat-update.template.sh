#!/bin/bash

set -euo pipefail

XRAY_SERVICE="xray"
XRAY_FOLDER="__XRAY_FOLDER__"
XRAY_DAT_PATH="$XRAY_FOLDER/dat"
XRAY_DATCHECK_DIR="$XRAY_FOLDER/dat-check"
ETAG_DIR="$XRAY_DATCHECK_DIR/etag"
HASH_DIR="$XRAY_DATCHECK_DIR/hash"
TMP_DIR="$XRAY_DATCHECK_DIR/tmp"
XRAY_USER="__XRAY_USER__"
XRAY_USER_GROUP="__XRAY_USER_GROUP__"

script_path="$(realpath "$0")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"
log_name="${script_name%.*}.log"
log_path="$script_dir/$log_name"

declare -A FILES=(
  ["geoip_antifilter.dat"]="https://github.com/Skrill0/AntiFilter-IP/releases/latest/download/geoip.dat"
  ["geosite_antifilter.dat"]="https://github.com/Skrill0/AntiFilter-Domains/releases/latest/download/geosite.dat"
  ["geoip_v2fly.dat"]="https://github.com/v2fly/geoip/releases/latest/download/geoip.dat"
  ["geosite_v2fly.dat"]="https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat"
  ["geoip_zkeen.dat"]="https://github.com/jameszeroX/zkeen-ip/releases/latest/download/zkeenip.dat"
  ["geosite_zkeengeo.dat"]="https://github.com/jameszeroX/zkeen-domains/releases/latest/download/zkeen.dat"
  ["geoip_antizapret.dat"]="https://github.com/savely-krasovsky/antizapret-sing-box/releases/latest/download/geoip.db"
  ["geosite_antizapret.dat"]="https://github.com/savely-krasovsky/antizapret-sing-box/releases/latest/download/geosite.db"
  ["geoip_russia-blocked.dat"]="https://raw.githubusercontent.com/runetfreedom/russia-blocked-geoip/release/geoip.dat"
  ["geosite_russia-blocked.dat"]="https://raw.githubusercontent.com/runetfreedom/russia-blocked-geosite/release/geosite.dat"
)

logs() {
  local level="$1"
  shift
  local caller="${FUNCNAME[1]:-MAIN}"
  local color reset timestamp
  timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
  reset='\033[0m'
  local log_file="${SCRIPT_DIR:-.}/install.log"
  local module="${MODULE_NAME:-$(realpath "$0" 2>/dev/null || echo "$0")}"

  case "$level" in
    INFO)        color='\033[1;34m' ;; # —Å–∏–Ω–∏–π
    OK|SUCCESS)  color='\033[1;32m' ;; # –∑–µ–ª—ë–Ω—ã–π
    WARN*)       color='\033[1;33m' ;; # –∂—ë–ª—Ç—ã–π
    ERR*|FAIL*)  color='\033[1;31m' ;; # –∫—Ä–∞—Å–Ω—ã–π
    SEP|SEPARATOR)
      color='\033[1;30m'
      local sep="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
      echo -e "${color}${sep}${reset}"
      echo "${sep}" >> "$log_file"
      return
      ;;
    TITLE|HEADER)
      color='\033[1;36m'
      local title="== [$module] $* =="
      echo -e "${color}${title}${reset}"
      echo "$title" >> "$log_file"
      return
      ;;
    *)           color='\033[0m' ;;
  esac

  echo -e "${color}[${timestamp}] [$level] [$module] [$caller] ${reset} $*"
  echo "[${timestamp}] [$level] [$module] [$caller] $*" >> "$log_file"
}

xray_dat_schedule_cron() {
    local cronline
    echo -e "\n –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GeoIP/GeoSite"

    echo "  –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:"
    echo "     0. –û—Ç–º–µ–Ω–∞"
    echo "     1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    echo "     2. –í—Ç–æ—Ä–Ω–∏–∫"
    echo "     3. –°—Ä–µ–¥–∞"
    echo "     4. –ß–µ—Ç–≤–µ—Ä–≥"
    echo "     5. –ü—è—Ç–Ω–∏—Ü–∞"
    echo "     6. –°—É–±–±–æ—Ç–∞"
    echo "     7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    echo "     8. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    echo "     9. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ cron"
    echo

    local day_choice hour minute day_of_week cron_expr
    while true; do
        read -rp "  –í–∞—à –≤—ã–±–æ—Ä: " day_choice
        [[ "$day_choice" =~ ^[0-9]$ ]] && break
        echo "  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9."
    done

    if [[ "$day_choice" == "9" ]]; then
        logs INFO "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å cron-–∑–∞–¥–∞—á—É –¥–ª—è: $script_path"

        tmp_cron="$(mktemp)"
        crontab -l 2>/dev/null | grep -vF "$script_path" > "$tmp_cron" || true
        crontab "$tmp_cron"
        rm -f "$tmp_cron"

        if crontab -l 2>/dev/null | grep -Fq "$script_path"; then
            logs ERR "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å cron-–∑–∞–¥–∞—á—É: $script_path"
        else
            logs OK "üóë Cron-–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª–∞): $script_path"
        fi

        return
    fi


    if [[ "$day_choice" -eq 0 ]]; then
        echo "  ‚ö† –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ cron"
        return
    fi

    read -rp "  –í–≤–µ–¥–∏—Ç–µ —á–∞—Å –∑–∞–ø—É—Å–∫–∞ (0-23): " hour
    while [[ ! "$hour" =~ ^[0-9]+$ || "$hour" -lt 0 || "$hour" -gt 23 ]]; do
        echo "  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
        read -rp "  –í–≤–µ–¥–∏—Ç–µ —á–∞—Å (0-23): " hour
    done

    read -rp "  –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∑–∞–ø—É—Å–∫–∞ (0-59): " minute
    while [[ ! "$minute" =~ ^[0-9]+$ || "$minute" -lt 0 || "$minute" -gt 59 ]]; do
        echo "  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
        read -rp "  –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (0-59): " minute
    done

    if [[ "$day_choice" -eq 8 ]]; then
        cron_expr="$minute $hour * * *"
    else
        [[ "$day_choice" -eq 7 ]] && day_of_week=0 || day_of_week=$day_choice
        cron_expr="$minute $hour * * $day_of_week"
    fi

    cronline="$cron_expr $script_path >> $log_path 2>&1"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cron
    logs "INFO" "script_path = $script_path"
    logs "INFO" "–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ crontab: $cronline"

    tmp_cron="$(mktemp)"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–º—è!)
    crontab -l 2>/dev/null | grep -vF "$script_path" > "$tmp_cron" || true

    echo "$cronline" >> "$tmp_cron"

    if crontab "$tmp_cron"; then
        logs "OK" "crontab —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"
    else
        logs "ERR" "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å crontab"
        rm -f "$tmp_cron"
        return 1
    fi

    rm -f "$tmp_cron"

    if crontab -l | grep -Fq "$script_path"; then
        full_line=$(crontab -l | grep -F "$script_path")
        logs "OK" "Cron-–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        logs "INFO" "Cron-—Å—Ç—Ä–æ–∫–∞: $full_line"
    else
        logs "ERR" "–û—à–∏–±–∫–∞: cron-–∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        return
    fi

}

main() {
    if [[ "${1:-}" == "-ci" ]]; then
        xray_dat_schedule_cron
        logs SEP
        logs TITLE "–ü–æ–ª–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ crontab:"
        crontab -l | while read -r line; do
            logs INFO "$line"
        done
        logs SEP
    fi

    mkdir -p "$TMP_DIR" "$XRAY_DAT_PATH" "$ETAG_DIR" "$HASH_DIR"
    updated=0

    for filename in "${!FILES[@]}"; do
    url="${FILES[$filename]}"
    tmpfile="$TMP_DIR/$filename"
    localfile="$XRAY_DAT_PATH/$filename"
    etag_file="$ETAG_DIR/.etag-$filename"
    hash_file="$HASH_DIR/.hash-$filename"
    header_file="$TMP_DIR/header-$filename"

    etag=$(cat "$etag_file" 2>/dev/null || echo "")
    http_status=$(curl -sS -L \
      --connect-timeout 10 \
      --max-time 30 \
      -H "If-None-Match: $etag" \
      -w "%{http_code}" \
      -D "$header_file" \
      -o "$tmpfile" \
      "$url")

    etag_server=$(grep -i '^ETag:' "$header_file" | cut -d' ' -f2 | tr -d '\r"')
    current_hash=$(sha256sum "$tmpfile" 2>/dev/null | cut -d' ' -f1)
    old_hash=$(cat "$hash_file" 2>/dev/null || echo "")

    if [[ "$http_status" == "200" ]]; then
      if [[ "$etag_server" == "$etag" && "$current_hash" == "$old_hash" ]]; then
        logs "INFO" "–ü–†–û–ü–£–©–ï–ù–û: $filename ‚Äî ETag –∏ —Ö–µ—à —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        rm -f "$tmpfile" "$header_file"
        continue
      fi
      [[ "$etag_server" == "$etag" && "$current_hash" != "$old_hash" ]] && \
        logs "WARN" "ETag —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ —Ö–µ—à –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –¥–ª—è $filename ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º"

      mv "$tmpfile" "$localfile"
      echo "$etag_server" > "$etag_file"
      echo "$current_hash" > "$hash_file"
      logs "OK" "–û–ë–ù–û–í–õ–ï–ù–û: $filename"
      updated=1
    elif [[ "$http_status" == "304" ]]; then
      logs "INFO" "–ü–†–û–ü–£–©–ï–ù–û: $filename ‚Äî HTTP 304 (–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ)"
      rm -f "$tmpfile" "$header_file"
    elif [[ "$http_status" == "404" ]]; then
      logs "ERROR" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404) –¥–ª—è $filename"
      rm -f "$tmpfile" "$header_file" "$etag_file"
    else
      logs "WARN" "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å HTTP $http_status –¥–ª—è $filename"
      rm -f "$tmpfile" "$header_file"
    fi
    done

    rm -rf "$TMP_DIR"

    if [[ $updated -eq 1 ]]; then
    logs "INFO" "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Xray: $XRAY_SERVICE"
    if systemctl restart "$XRAY_SERVICE"; then
      logs "OK" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
    else
      logs "ERR" "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–ª—É–∂–±—ã $XRAY_SERVICE"
    fi
    else
        logs "INFO" "–í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    fi
}

main "$@"
